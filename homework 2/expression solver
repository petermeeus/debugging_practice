#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------expression parsers-------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------

from enum import Enum

class TokenType(Enum):
    """
    Tokens can be of three types:
    numbers (digits), identifiers (characters), and symbols (any)
    """
    NUMBER = 1
    IDENTIFIER = 2
    SYMBOL = 3


class TokenList:
    def __init__(self):
        self._type = TokenType.NUMBER
        self._value = None
        self._next = None

    def __str__(self):
        return_value = str(self._value)
        if self._next is not None:
            return_value += " " + str(self._next)
        return return_value


def _match_number(text: str, position: int) -> tuple[int, int]:
    """
    Reads a number from the input
    :param text: input string
    :param position: start position of the number
    :return: (number read, first position in text after the read number)
    """
    output = 0
    while position < len(text) and "0" <= text[position] <= "9":
        output = output*10 + int(text[position])
        position += 1
    return output, position


def _match_symbol(text: str, position: int) -> tuple[str, int]:
    """
    Reads a single character as a symbol from the input
    :param text: input string
    :param position: start position of the symbol
    :return: (symbol read, first position in text after the read symbol)
    """
    return text[position], position + 1


def _match_identifier(text: str, position: int) -> tuple[str, int]:
    """
    Reads an identifier  from the input
    :param text: input string
    :param position: start position of the identifier
    :return: (identifier read, first position in text after the read identifier)
    """
    old_position = position
    while position < len(text) and text[position].isalnum():
        position += 1
    return text[old_position:position], position


def _generate_node(text: str, position: int) -> tuple[TokenList, int]:
    """
    Generates a new TokenList node.
    :param text: string to read the node information from
    :param position: start position of the information
    :return: a tuple with the generated node and the new position in the input
    """
    new_node = TokenList()
    if "0" <= text[position] <= "9":
        # A digit signals the start of a number
        new_node._type = TokenType.NUMBER
        new_node._value, position = _match_number(text, position)
    elif text[position].isalpha():
        # An alphabetic character signals an identifier
        new_node._type = TokenType.IDENTIFIER
        new_node._value, position = _match_identifier(text, position)
    else:
        # In all other cases, it is a symbol
        new_node._type = TokenType.SYMBOL
        new_node._value, position = _match_symbol(text, position)
    return new_node, position


def generate_token_list(text: str) -> TokenList:
    head = None
    tail = None
    position = 0
    while position < len(text):
        if text[position].isspace():
            position += 1
        else:
            node, position = _generate_node(text, position)
            if head is None:
                head = node
            else:
                tail._next = node
            tail = node
    return head








#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------expression evaluator-------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------

class TokenListPosition:
    def __init__(self, tokens: TokenList):
        self.tokens = tokens

def _accept_number(position: TokenListPosition) -> bool:
    if position.tokens is not None and position.tokens._type == TokenType.NUMBER:
        position.tokens = position.tokens._next
        return True
    return False

def _accept_identifier(position: TokenListPosition) -> bool:
    if position.tokens is not None and position.tokens._type == TokenType.IDENTIFIER:
        position.tokens = position.tokens._next
        return True
    return False

def _accept_symbol(position: TokenListPosition, symbol: str) -> bool:
    if position.tokens is not None and position.tokens._type == TokenType.SYMBOL and position.tokens._value == symbol:
        position.tokens = position.tokens._next
        return True
    return False

def _accept_term(position: TokenListPosition) -> bool:
    # Save the starting point for backtracking.
    start = position.tokens
    coefficient_present = False

    # Try to accept an optional natural number (coefficient).
    if _accept_number(position):
        coefficient_present = True

    # If an identifier follows, then we are in the second case.
    if _accept_identifier(position):
        # Optionally accept an exponent.
        if _accept_symbol(position, "^"):
            if not _accept_number(position):
                # Restore if exponent is missing.
                position.tokens = start
                return False
        return True
    # If no identifier was found, then we must have had a natural number alone.
    if coefficient_present:
        return True

    # Otherwise, backtrack.
    position.tokens = start
    return False

def _accept_expression(position: TokenListPosition) -> bool:
    # Optionally accept a leading minus sign.
    _accept_symbol(position, "-")
    if not _accept_term(position):
        return False
    while True:
        # Check for operator and then a term.
        if _accept_symbol(position, "+") or _accept_symbol(position, "-"):
            if not _accept_term(position):
                return False
        else:
            break
    return True

def _accept_equation(position: TokenListPosition) -> bool:
    # Equation: expression '=' expression.
    if not (_accept_expression(position) and _accept_symbol(position, "=") and _accept_expression(position)):
        return False
    return True

def recognize_expression(tokenlist: TokenList) -> bool:
    position = TokenListPosition(tokenlist)
    return _accept_equation(position) and position.tokens is None

def recognize__different_variable_amount(tokenlist: TokenList) -> int:
    variables = set()
    current = tokenlist
    while current is not None:
        if current._type == TokenType.IDENTIFIER:
            variables.add(current._value)
        current = current._next
    return len(variables)

def recognize_poly_degree(tokenlist: TokenList) -> int:
    degree = 0
    found_variable = False
    current = tokenlist
    while current is not None:
        if current._type == TokenType.IDENTIFIER:
            found_variable = True
            # If an exponent (^) follows the identifier, check it
            if (current._next is not None and 
                current._next._type == TokenType.SYMBOL and 
                current._next._value == "^"):
                exp_token = current._next._next
                if exp_token is not None and exp_token._type == TokenType.NUMBER:
                    if exp_token._value > degree:
                        degree = exp_token._value
                    # Skip over the exponent part.
                    current = exp_token
                    continue
            else:
                # If there's no explicit exponent, the variable appears with implicit exponent 1.
                if degree < 1:
                    degree = 1
        current = current._next
    return degree if found_variable else 0





#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------expression solver-------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------



class TokenListEvaluation:
    def __init__(self, tokens: TokenList):
        self.tokens = tokens
        self.value = 0
    #track amount of variables as well as the degree of the polynomial


def _value_number(status: TokenListEvaluation) -> bool:
    """
    Records the value of a number, if it exists
    :param position: pointer to a token list node evaluation
    :return: True iff a number has been read off the token list
    """
    if status.tokens is not None and status.tokens._type == TokenType.NUMBER:
        status.value = status.tokens._value
        status.tokens = status.tokens._next
        return True
    return False


def _value_factor(status: TokenListEvaluation) -> bool:
    """
    Records the value of a factor, if it exists
    :param position: pointer to a token list node evaluation
    :return: True iff a factor has been read off the token list
    """
    return _value_number(status) or \
        (_accept_symbol(status, "(") and  _value_expression(status) and _accept_symbol(status, "("))


def _value_term(status: TokenListEvaluation) -> bool:
    """
    Records the value of a maximal term, if it exists
    :param position: pointer to a token list node evaluation
    :return: True iff a term has been read off the token list
    """
    if not _value_factor(status):
        # A term must start with a factor
        return False
    value = status.value
    while status.tokens is not None:
        if _accept_symbol(status, "*"):
            if _value_factor(status):
                value *= status.value
            else:
                return False
        elif _accept_symbol(status, "/"):
            if _value_factor(status):
                value /= status.value
            else:
                return False
        else:
            status.value = value
            return True
    # If there are no more * or /, the term is finished
    status.value = value
    return True


def _value_expression(status: TokenListEvaluation) -> bool:
    """
    Records the value of a maximal expression, if it exists
    :param position: pointer to a token list node evaluation
    :return: True iff an expression has been read off the token list
    """
    if not _value_term(status):
        # An expression must start with a term
        return False
    value = status.value
    while status.tokens is not None:
        if _accept_symbol(status, "+"):
            if _value_term(status):
                value += status.value
            else:
                return False
        elif _accept_symbol(status, "-"):
            if _value_term(status):
                value -= status.value
            else:
                return False
        else:
            status.value = value
            return True
    # If there are no more + or -, the expression is finished
    status.value = value
    return True


def evaluate_expression(tokenlist: TokenList):
    """
    Determines whether a given token list represents a valid numerical expression
    and return the value if it is
    :param tokenlist: token list
    :return: the value of the expression represented by tokenlist,
    or None if tokenlist is not a valid expression
    """
    status = TokenListEvaluation(tokenlist)
    if _value_expression(status) and status.tokens is None:
        return status.value
    return None







#-------------------------------------------------------------------------------------------------------------------
#testing area




"""print("give an expression: ")
expression = input()
while expression[0] != "!":
    tokenlist = generate_token_list(expression)
    print("the token list is ", str(tokenlist))
    print("\ngive an expression: ")
    expression = input()
print("good bye")"""


def run_expression_finder():
    while True:
        expression = input("give an expression: ")
        # Handle empty input
        if not expression:
            print("this is not an expression")
            break

        tokenlist = generate_token_list(expression)
        print("the token list is", str(tokenlist))

        if recognize_expression(tokenlist):
            print("this is a valid expression")
        else:
            print("this is not an expression")

        var_count = recognize__different_variable_amount(tokenlist)
        if var_count == 0:
            print("no variables found")
        else:
            print("the amount of different variables is", var_count)

        degree = recognize_poly_degree(tokenlist)
        if degree == 0:
            print("no degree found")
        else:
            print("the degree of the polynomial is", degree)

    print("good bye")


run_expression_finder()

